---
authelia:
  # ingress:
  #   enabled: true
  #   annotations:
  #       cert-manager.io/cluster-issuer: "issuer"
  #       nginx.ingress.kubernetes.io/real-ip-header: "X-Forwarded-For"
  #   certManager: true
  #   rewriteTarget: true
  #   tls:
  #     enabled: true
  #     secret: 'authelia-tls'
  #
  #     hostNameOverride: 'auth.intropin.be'
  #
  env:
    - name: 'TZ'
      value: 'Europe/Brussels'

  pod:
    extraVolumes:
      - name: users-database
        configMap: 
          name: authelia-userdb
          items:
          - key: users_database.yml
            path: users_database.yml
      - name: config-dir
        emptyDir: {}
      
    extraVolumeMounts:
      - name: users-database
        mountPath: /config/users_database.yml
        subPath: users_database.yml
        readOnly: true
      - name: config-dir
        mountPath: /config
        subPath: ""

  configMap:
    key: 'configuration.yaml'
    log:
      level: 'debug'
      format: 'text'
  
    theme: 'dark'
  
    identity_validation:
      reset_password:
        jwt_lifespan: '5 minutes'
        jwt_algorithm: 'HS256'
      elevated_session:
        code_lifespan: '5 minutes'
        elevation_lifespan: '10 minutes'
        characters: 8
        require_second_factor: false
        skip_second_factor: false
  
    totp:
      disable: false
  
    ntp:
      address: 'udp://be.pool.ntp.org:123'
  
    authentication_backend:
      password_reset:
        disable: true
      file:
        enabled: true

    notifier:
      filesystem:
        enabled: true
        filename: '/config/notification.txt'
  
    ##
    ## Access Control Configuration
    ##
    ## Access control is a list of rules defining the authorizations applied for one resource to users or group of users.
    ##
    ## If 'access_control' is not defined, ACL rules are disabled and the 'bypass' rule is applied, i.e., access is allowed
    ## to anyone. Otherwise restrictions follow the rules defined.
    ##
    ## Note: One can use the wildcard * to match any subdomain.
    ## It must stand at the beginning of the pattern. (example: *.mydomain.com)
    ##
    ## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct.
    ##
    ## Definition: A 'rule' is an object with the following keys: 'domain', 'subject', 'policy' and 'resources'.
    ##
    ## - 'domain' defines which domain or set of domains the rule applies to.
    ##
    ## - 'subject' defines the subject to apply authorizations to. This parameter is optional and matching any user if not
    ##    provided. If provided, the parameter represents either a user or a group. It should be of the form
    ##    'user:<username>' or 'group:<groupname>'.
    ##
    ## - 'policy' is the policy to apply to resources. It must be either 'bypass', 'one_factor', 'two_factor' or 'deny'.
    ##
    ## - 'resources' is a list of regular expressions that matches a set of resources to apply the policy to. This parameter
    ##   is optional and matches any resource if not provided.
    ##
    ## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
    access_control:
  
      ## Configure the ACL as a Secret instead of part of the ConfigMap.
      secret:
  
        ## Enables the ACL section being generated as a secret.
        enabled: false
  
        ## The key in the secret which contains the file to mount.
        key: 'configuration.acl.yaml'
  
        ## An existingSecret name, if configured this will force the secret to be mounted using the key above.
        existingSecret: ''
  
      ## Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
      ## resource if there is no policy to be applied to the user.
      default_policy: 'deny'
      rules:
        - domain: '*.intropin.be'
          policy: one_factor
          subject: 'group:admin'
  
    session:
      name: 'authelia_session'
  
      ## Sets the Cookie SameSite value. Possible options are none, lax, or strict.
      ## Please read https://www.authelia.com/configuration/session/introduction/#same_site
      same_site: 'lax'
      expiration: '1 hour'
      inactivity: '5 minutes'
      remember_me: '1 month'
  
      cookies: 
        - subdomain: 'auth'
          domain: 'intropin.be'
  
    storage:
      local:
        enabled: true
        path: /config/db.sqlite3
  
    identity_providers:
      oidc:
        enabled: true
  
        clients:
          - client_id: 'argocd'
            client_name: 'Argo CD'
            secret:
              value: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'
              path: /secret/oidc.client.argocd.value
            public: false
            authorization_policy: 'one_factor'
            redirect_uris:
              - https://argocd.intropin.be/auth/callback
            scopes:
              - openid
              - groups
              - email
              - profile
            userinfo_signed_response_alg: 'none'
        # clients:
          # -
            ## The ID is the OpenID Connect ClientID which is used to link an application to a configuration.
            # client_id: 'myapp'
  
            ## The client secret is a shared secret between Authelia and the consumer of this client.
            # client_secret:
              # value: '$plaintext$apple123'
              # path: '/secrets/oidc.client.myapp.value'
  
            ## The description to show to users when they end up on the consent screen. Defaults to the ID above.
            # client_name: 'My Application'
  
            ## Sector Identifiers are occasionally used to generate pairwise subject identifiers. In most cases this is not
            ## necessary. Read the documentation for more information.
            ## The subject identifier must be the host component of a URL, which is a domain name with an optional port.
            # sector_identifier_uri: 'example.com'
  
            ## Sets the client to public. This should typically not be set, please see the documentation for usage.
            # public: false
  
            ## The policy to require for this client; one_factor or two_factor.
            # authorization_policy: 'two_factor'
  
            ## The consent mode controls how consent is obtained.
            # consent_mode: 'auto'
  
            ## This value controls the duration a consent on this client remains remembered when the consent mode is
            ## configured as 'auto' or 'pre-configured'.
            # pre_configured_consent_duration: '30 days'
  
            ## Audience this client is allowed to request.
            # audience: []
  
            ## Scopes this client is allowed to request.
            # scopes:
            #   - 'openid'
            #   - 'profile'
            #   - 'email'
            #   - 'groups'
  
            ## Redirect URI's specifies a list of valid case-sensitive callbacks for this client.
            # redirect_uris:
            #   - 'https://oidc.example.com/oauth2/callback'
  
            ## Request URI's specifies a list of valid case-sensitive URIs this client can ask Authelia to obtain a
            ## Request Object from.
            # request_uris:
            #   - 'https://oidc.example.com/oauth2/request-object/authelia.jwk'
  
            ## Grant Types configures which grants this client can obtain.
            ## It's not recommended to configure this unless you know what you're doing.
            # grant_types:
            #   - 'refresh_token'
            #   - 'authorization_code'
  
            ## Response Types configures which responses this client can be sent.
            ## It's not recommended to configure this unless you know what you're doing.
            # response_types:
            #   - 'code'
  
            ## Response Modes configures which response modes this client supports.
            ## It's not recommended to configure this unless you know what you're doing.
            # response_modes:
            #   - 'form_post'
            #   - 'query'
            #   - 'fragment'
  
            # enforce_par: false
            # enforce_pkce: false
            # pkce_challenge_method: 'S256'
            # authorization_signed_response_alg: 'RS256'
            # authorization_signed_response_key_id: ''
  
            ## The algorithm of the issuer key used to sign ID Tokens for this client, must be one of the
            ## registered issuer key algorithms.
            # id_token_signed_response_alg: 'RS256'
  
            ## The key id of the issuer key used to sign ID Tokens for this client.
            # id_token_signed_response_key_id: ''
  
            ## The algorithm of the issuer key used to sign Access Tokens for this client, must be either none or one of
            ## the registered issuer key algorithms.
            # access_token_signed_response_alg: 'none'
  
            ## The key id of the issuer key used to sign Access Tokens for this client.
            # access_token_signed_response_key_id: ''
  
            ## The algorithm of the issuer key used to sign User Info Responses for this client, must be either none or
            ## one of the registered issuer key algorithms.
            # userinfo_signed_response_alg: 'none'
  
            ## The key id of the issuer key used to sign User Info Responses for this client.
            # userinfo_signed_response_key_id: ''
  
            ## The signing algorithm used for Introspection responses. An issuer JWK with a matching algorithm must be
            ## available when configured. Has no effect if introspection_signed_response_key_id is configured.
            # introspection_signed_response_alg: 'none'
  
            ## The signing key id used for Introspection responses. An issuer JWK with a matching key id must be available
            ## when configured.
            # introspection_signed_response_key_id: ''
  
            ## The algorithm the client must sign their request objects with, must either be empty or one of the
            ## registered client key algorithms.
            # request_object_signing_alg: ''
  
            ## The algorithm the client must sign the object when using the 'private_key_jwt' auth method, must either be
            ## empty or one of the registered client key algorithms.
            # token_endpoint_auth_signing_alg: 'RS256'
  
            ## The authentication method the client must use to authenticate.
            # token_endpoint_auth_method: 'client_secret_post'
  
  
  ##
  ## Authelia Secret Configuration.
  ##
  secret:
  
    disabled: false
  
    existingSecret: ''
    # existingSecret: authelia
  
    annotations: {}
    # annotations:
    #   myAnnotation: 'myValue'
  
    labels: {}
    # labels:
    #   myLabel: 'myValue'
  
    mountPath: '/secrets'
  
    ## additionalSecrets contains a list of additional secrets to mount.
    ## They will all be mounted in the format of '/{mountPath}/{key}' where the '{mountPath}' is the value above and
    ## '{key}' is the key from the dictionary below (in our example we named it 'example'). If the items are specified
    ## then those options will be rendered in the volumes spec. See 'example-without-items' for an example that doesn't
    ## specify this.
    ##
    additionalSecrets: {}
    # additionalSecrets:
    #   example:
    #     items:
    #       - key: 'key-example'
    #         path: 'path-example'
    #   example-without-items: {}
